import numpy as np

# Activation function: Sigmoid
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Forward Propagation
def forward(X, weights_input_hidden, weights_hidden_output):
    # Hidden layer computation
    hidden_input = np.dot(X, weights_input_hidden)
    hidden_output = sigmoid(hidden_input)

    # Output layer computation
    final_input = np.dot(hidden_output, weights_hidden_output)
    final_output = sigmoid(final_input)

    return final_output

# XOR dataset
X = np.array([
    [0, 0],
    [0, 1],
    [1, 0],
    [1, 1]
])

# Manually chosen weights that solve XOR
weights_input_hidden = np.array([
    [5, -5],
    [5, -5]
])  # 2x2 weights

weights_hidden_output = np.array([
    [7],
    [-7]
])  # 2x1 weights

# Run the network
outputs = forward(X, weights_input_hidden, weights_hidden_output)

print("Input:\n", X)
print("\nOutput:\n", outputs.round(3))
